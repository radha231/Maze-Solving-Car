const int front_trigPin = 2;
const int front_echoPin = 3;

const int left_trigPin = 4;
const int left_echoPin = 5;

const int right_trigPin = A0;
const int right_echoPin = A1;

const int pirPin_left = A4;
const int pirPin_right = A3;
const int pirPin_front = A5;

double uv_duration = 0;
float uv_distance_cm = 0;

const int left_bm_enable = 6;
const int left_bm_cw = 7;
const int left_bm_acw = 8;

const int right_bm_enable = 11;
const int right_bm_cw = 13;
const int right_bm_acw = 12;

float distance = 18.0;
int speed = 100;
int duration = 400;
float critical_dist = 8.0;
float degpmsec = 12.55 / speed; // degree per milisecond
int feedback_delay = 15;
float unit_distance = 16 * 100/speed;

int* arr = (int*)malloc(100*sizeof(int));
int size = 0;
int issolved = 0;

void setup(){
  Serial.begin(9600);
  pinMode(front_trigPin, OUTPUT);
  pinMode(front_echoPin, INPUT);
  digitalWrite(front_trigPin, LOW);

  pinMode(left_trigPin, OUTPUT);
  pinMode(left_echoPin, INPUT);
  digitalWrite(left_trigPin, LOW);

  pinMode(right_trigPin, OUTPUT);
  pinMode(right_echoPin, INPUT);
  digitalWrite(right_trigPin, LOW);

  pinMode(pirPin_left, INPUT);

  pinMode(left_bm_enable, OUTPUT);
  pinMode(left_bm_cw, OUTPUT);
  pinMode(left_bm_acw, OUTPUT);

  pinMode(right_bm_enable, OUTPUT);
  pinMode(right_bm_cw, OUTPUT);
  pinMode(right_bm_acw, OUTPUT);
}

float dist_front_uv(){
  float temp1, temp2, temp3;
  digitalWrite(front_trigPin, HIGH);
  delay(2);
  digitalWrite(front_trigPin, LOW);
  uv_duration = pulseIn(front_echoPin, HIGH);
  temp1 = abs(uv_duration*0.034/2);

  digitalWrite(front_trigPin, HIGH);
  delay(2);
  digitalWrite(front_trigPin, LOW);
  uv_duration = pulseIn(front_echoPin, HIGH);
  temp2 = abs(uv_duration*0.034/2);

  digitalWrite(front_trigPin, HIGH);
  delay(2);
  digitalWrite(front_trigPin, LOW);
  uv_duration = pulseIn(front_echoPin, HIGH);
  temp3 = abs(uv_duration*0.034/2);

  uv_distance_cm = (temp1 + temp2 + temp3)/3;

  return uv_distance_cm;
}

float dist_left_uv(){
  float temp1, temp2, temp3;
  digitalWrite(left_trigPin, HIGH);
  delay(2);
  digitalWrite(left_trigPin, LOW);
  uv_duration = pulseIn(left_echoPin, HIGH);
  temp1 = abs(uv_duration*0.034/2);

  digitalWrite(left_trigPin, HIGH);
  delay(2);
  digitalWrite(left_trigPin, LOW);
  uv_duration = pulseIn(left_echoPin, HIGH);
  temp2 = abs(uv_duration*0.034/2);

  digitalWrite(left_trigPin, HIGH);
  delay(2);
  digitalWrite(left_trigPin, LOW);
  uv_duration = pulseIn(left_echoPin, HIGH);
  temp3 = abs(uv_duration*0.034/2);

  uv_distance_cm = (temp1 + temp2 + temp3)/3;

  return uv_distance_cm;
}

float dist_right_uv(){
  float temp1, temp2, temp3;
  analogWrite(right_trigPin, 255);
  delay(2);
  analogWrite(right_trigPin, 0);
  uv_duration = pulseIn(right_echoPin, HIGH);
  temp1 = abs(uv_duration*0.034/2);

  analogWrite(right_trigPin, 255);
  delay(2);
  analogWrite(right_trigPin, 0);
  uv_duration = pulseIn(right_echoPin, HIGH);
  temp2 = abs(uv_duration*0.034/2);

  analogWrite(right_trigPin, 255);
  delay(2);
  analogWrite(right_trigPin, 0);
  uv_duration = pulseIn(right_echoPin, HIGH);
  temp3 = abs(uv_duration*0.034/2);

  uv_distance_cm = (temp1 + temp2 + temp3)/3;

  return uv_distance_cm;
}

bool check_front_uv(){
  float temp1, temp2, temp3;
  digitalWrite(front_trigPin, HIGH);
  delay(2);
  digitalWrite(front_trigPin, LOW);
  uv_duration = pulseIn(front_echoPin, HIGH);
  temp1 = abs(uv_duration*0.034/2);

  digitalWrite(front_trigPin, HIGH);
  delay(2);
  digitalWrite(front_trigPin, LOW);
  uv_duration = pulseIn(front_echoPin, HIGH);
  temp2 = abs(uv_duration*0.034/2);

  digitalWrite(front_trigPin, HIGH);
  delay(2);
  digitalWrite(front_trigPin, LOW);
  uv_duration = pulseIn(front_echoPin, HIGH);
  temp3 = abs(uv_duration*0.034/2);

  uv_distance_cm = (temp1 + temp2 + temp3)/3;

  if (uv_distance_cm >= 100 & !digitalRead(pirPin_front)) return 1; // there is a wall
  if (uv_distance_cm <= distance || (!digitalRead(pirPin_front))){
    return 1;
  } else {
    return 0;
  }
}

bool check_left_uv(){
  float temp1, temp2, temp3;
  digitalWrite(left_trigPin, HIGH);
  delay(2);
  digitalWrite(left_trigPin, LOW);
  uv_duration = pulseIn(left_echoPin, HIGH);
  temp1 = abs(uv_duration*0.034/2);

  digitalWrite(left_trigPin, HIGH);
  delay(2);
  digitalWrite(left_trigPin, LOW);
  uv_duration = pulseIn(left_echoPin, HIGH);
  temp2 = abs(uv_duration*0.034/2);

  digitalWrite(left_trigPin, HIGH);
  delay(2);
  digitalWrite(left_trigPin, LOW);
  uv_duration = pulseIn(left_echoPin, HIGH);
  temp3 = abs(uv_duration*0.034/2);

  uv_distance_cm = (temp1 + temp2 + temp3)/3;

  if (uv_distance_cm >= 100 & !digitalRead(pirPin_left)) return 1; // there is a wall
  if ((uv_distance_cm <= distance) || (!digitalRead(pirPin_left))){
    return 1;
  } else {
    return 0;
  }
}

bool check_right_uv(){
  float temp1, temp2, temp3;
  analogWrite(right_trigPin, 255);
  delay(2);
  analogWrite(right_trigPin, 0);
  uv_duration = pulseIn(right_echoPin, HIGH);
  temp1 = abs(uv_duration*0.034/2);

  analogWrite(right_trigPin, 255);
  delay(2);
  analogWrite(right_trigPin, 0);
  uv_duration = pulseIn(right_echoPin, HIGH);
  temp2 = abs(uv_duration*0.034/2);

  analogWrite(right_trigPin, 255);
  delay(2);
  analogWrite(right_trigPin, 0);
  uv_duration = pulseIn(right_echoPin, HIGH);
  temp3 = abs(uv_duration*0.034/2);

  uv_distance_cm = (temp1 + temp2 + temp3)/3;
  if ((uv_distance_cm >= 100) & (!digitalRead(pirPin_right))) return 1; // there is a wall
  if ((uv_distance_cm <= distance) || (!digitalRead(pirPin_right))){
    return 1;
  } else {
    return 0;
  }
}

bool check_pir_left(){
  return digitalRead(pirPin_left);
}

bool check_pir_right(){
  return digitalRead(pirPin_right);
}

bool check_pir_front(){
  return digitalRead(pirPin_front);
}

int optimize(){
  // read 3 values from the arr starting from the end
  // 0 for front
  // 1 for Left
  // 2 for Right
  // 3 for back

  for (int i=size-1; i>=2; i--){
    if (arr[i] == 1 && arr[i-1] == 3 && arr[i-2] == 1){
        
        // LBL = S
        arr[i-2] = 0;
        // shifting the array
        for (int j=i-1; j<size-2; j++){
          arr[j] = arr[j+2];
        }
        size = size - 2;
    } else if (arr[i] == 1 && arr[i-1] == 3 && arr[i-2] == 0){
        // LBS = R
        arr[i-2] = 2;
        // shifting the array
        for (int j=i-1; j<size-2; j++){
          arr[j] = arr[j+2];
        }
        size = size - 2;
    }  else if (arr[i] == 2 && arr[i-1] == 3 && arr[i-2] == 1){
        // RBL = B
        arr[i-2] = 3;
        // shifting the array
        for (int j=i-1; j<size-2; j++){
          arr[j] = arr[j+2];
        }
        size = size - 2;
    }  else if (arr[i] == 2 && arr[i-1] == 3 && arr[i-2] == 1){
        // LBS = R
        arr[i-2] = 2;
        // shifting the array
        for (int j=i-1; j<size-2; j++){
          arr[j] = arr[j+2];
        }
        size = size - 2;
    }  else if (arr[i] == 0 && arr[i-1] == 3 && arr[i-2] == 0){
        // SBS = B
        arr[i-2] = 3;
        // shifting the array
        for (int j=i-1; j<size-2; j++){
          arr[j] = arr[j+2];
        }
        size = size - 2;
    } else if (arr[i] == 0 && arr[i-1] == 3 && arr[i-2] == 1){
        // SBL = R
        arr[i-2] = 2;
        // shifting the array
        for (int j=i-1; j<size-2; j++){
          arr[j] = arr[j+2];
        }
        size = size - 2;
    }
  }
  return size; // return the size of the final array
}

void rotate_cw(int degree){
  float sleeptime = degree/degpmsec;
  // sleeptime = 1200 for 90 degrees
  // rotate all the wheels in clockwise direction
  digitalWrite(left_bm_cw, HIGH);
  digitalWrite(left_bm_acw, LOW);

  digitalWrite(right_bm_cw, LOW);
  digitalWrite(right_bm_acw, HIGH);

  analogWrite(left_bm_enable, speed);
  analogWrite(right_bm_enable, speed);
  delay((int)sleeptime);
  
  // now reset everything to normal
  digitalWrite(left_bm_cw, LOW);
  digitalWrite(left_bm_acw, LOW);

  digitalWrite(right_bm_cw, LOW);
  digitalWrite(right_bm_acw, LOW);

  analogWrite(left_bm_enable, 0);
  analogWrite(right_bm_enable, 0);
}

void rotate_acw(int degree){
  float sleeptime = degree/degpmsec;
  digitalWrite(left_bm_cw, LOW);
  digitalWrite(left_bm_acw, HIGH);

  digitalWrite(right_bm_cw, HIGH);
  digitalWrite(right_bm_acw, LOW);

  analogWrite(left_bm_enable, speed);
  analogWrite(right_bm_enable, speed);
  delay((int)sleeptime);

  // now reset everything to normal
  digitalWrite(left_bm_cw, LOW);
  digitalWrite(left_bm_acw, LOW);

  digitalWrite(right_bm_cw, LOW);
  digitalWrite(right_bm_acw, LOW);

  analogWrite(left_bm_enable, 0);
  analogWrite(right_bm_enable, 0);
}

void rotate_cw_feedback(int degree){
  float sleeptime = degree/degpmsec;
  // sleeptime = 1200 for 90 degrees
  // rotate all the wheels in clockwise direction
  digitalWrite(left_bm_cw, HIGH);
  digitalWrite(left_bm_acw, LOW);

  digitalWrite(right_bm_cw, LOW);
  digitalWrite(right_bm_acw, HIGH);

  analogWrite(left_bm_enable, speed);
  analogWrite(right_bm_enable, speed);
  delay((int)sleeptime);
  
  for (int i=0; i<feedback_delay; i++){
    if (dist_left_uv() > dist_right_uv()){
      rotate_acw(1);
    } else {
      break;
    }
  }

  // now reset everything to normal
  digitalWrite(left_bm_cw, LOW);
  digitalWrite(left_bm_acw, LOW);

  digitalWrite(right_bm_cw, LOW);
  digitalWrite(right_bm_acw, LOW);

  analogWrite(left_bm_enable, 0);
  analogWrite(right_bm_enable, 0);
}

void rotate_acw_feedback(int degree){
  float sleeptime = degree/degpmsec;
  digitalWrite(left_bm_cw, LOW);
  digitalWrite(left_bm_acw, HIGH);

  digitalWrite(right_bm_cw, HIGH);
  digitalWrite(right_bm_acw, LOW);

  analogWrite(left_bm_enable, speed);
  analogWrite(right_bm_enable, speed);
  delay((int)sleeptime);
  
  for (int i=0; i<feedback_delay; i++){
    if (dist_left_uv() < dist_right_uv()){
      rotate_cw(1);
    } else {
      break;
    }
  }

  // now reset everything to normal
  digitalWrite(left_bm_cw, LOW);
  digitalWrite(left_bm_acw, LOW);

  digitalWrite(right_bm_cw, LOW);
  digitalWrite(right_bm_acw, LOW);

  analogWrite(left_bm_enable, 0);
  analogWrite(right_bm_enable, 0);
}

void move_forward(){
  // rotate all the wheels in clockwise direction 
  if (!digitalRead(pirPin_left) && (dist_left_uv()>=100)){
    Serial.print("LCritical");
    Serial.println();
    rotate_cw(10);
  } else if (dist_left_uv() <= (critical_dist)){
    Serial.print("Left Critical");
    Serial.println();
    rotate_cw(10);
  }
  Serial.println();

  if (!digitalRead(pirPin_right) && (dist_right_uv()>=100)){
    Serial.print("RCritical");
    Serial.println();
    rotate_acw(10);
  } else if (dist_right_uv() <= critical_dist){
    Serial.print("Right Critical");
    Serial.println();
    rotate_acw(10);
  }

  if ((unit_distance+1) < dist_front_uv()){

    // we can move the car and then check for adjustment using feedback
    digitalWrite(left_bm_cw, HIGH);
    digitalWrite(left_bm_acw, LOW);

    digitalWrite(right_bm_cw, HIGH);
    digitalWrite(right_bm_acw, LOW);

    analogWrite(left_bm_enable, speed);
    analogWrite(right_bm_enable, speed);
    delay(duration);

    // now reset everything to normal
    digitalWrite(left_bm_cw, LOW);
    digitalWrite(left_bm_acw, LOW);

    digitalWrite(right_bm_cw, LOW);
    digitalWrite(right_bm_acw, LOW);

    analogWrite(left_bm_enable, 0);
    analogWrite(right_bm_enable, 0);

    for (int i=0; i<feedback_delay; i++){
      if (i==1) Serial.println("It adjusts");
      if (dist_left_uv() < dist_right_uv()){
        rotate_cw(1);
      } else if (dist_left_uv() > dist_right_uv()){
        rotate_acw(1);
      } else {
        break;
      }
    }

  } else {
    // we cannot move forward
    // adjust now and then make a move forward
    if ((unit_distance+1) < dist_front_uv()){
      // checking once again if the distance measured were accurate
      digitalWrite(left_bm_cw, HIGH);
      digitalWrite(left_bm_acw, LOW);

      digitalWrite(right_bm_cw, HIGH);
      digitalWrite(right_bm_acw, LOW);

      analogWrite(left_bm_enable, speed);
      analogWrite(right_bm_enable, speed);
      delay(duration);

      // now reset everything to normal
      digitalWrite(left_bm_cw, LOW);
      digitalWrite(left_bm_acw, LOW);

      digitalWrite(right_bm_cw, LOW);
      digitalWrite(right_bm_acw, LOW);

      analogWrite(left_bm_enable, 0);
      analogWrite(right_bm_enable, 0);

      for (int i=0; i<feedback_delay; i++){
        if (dist_left_uv() < dist_right_uv()){
          rotate_cw(1);
        } else if (dist_left_uv() > dist_right_uv()){
          rotate_acw(1);
        }
      }
    } else {
      int dur_counter = 0;
      while (((unit_distance-(unit_distance/40)*dur_counter) > dist_front_uv()) && dur_counter <= 40){
        dur_counter++;
        // we will now trying moving forward and then adjusting and then moving forward
        for (int i=0; i<feedback_delay; i++){
          if (dist_left_uv() < dist_right_uv()){
            rotate_cw(1);
          } else if (dist_left_uv() > dist_right_uv()){
            rotate_acw(1);
          } else {
            break;
          }
        }

        digitalWrite(left_bm_cw, HIGH);
        digitalWrite(left_bm_acw, LOW);

        digitalWrite(right_bm_cw, HIGH);
        digitalWrite(right_bm_acw, LOW);

        analogWrite(left_bm_enable, speed);
        analogWrite(right_bm_enable, speed);
        delay((int)(duration/40));

        digitalWrite(left_bm_cw, LOW);
        digitalWrite(left_bm_acw, LOW);

        digitalWrite(right_bm_cw, LOW);
        digitalWrite(right_bm_acw, LOW);

        analogWrite(left_bm_enable, 0);
        analogWrite(right_bm_enable, 0);
      }

      // it can be still be possible of a collision over head

      digitalWrite(left_bm_cw, HIGH);
      digitalWrite(left_bm_acw, LOW);

      digitalWrite(right_bm_cw, HIGH);
      digitalWrite(right_bm_acw, LOW);

      analogWrite(left_bm_enable, speed);
      analogWrite(right_bm_enable, speed);
      delay((int)(duration-(int)duration/40*dur_counter));

      // now reset everything to normal
      digitalWrite(left_bm_cw, LOW);
      digitalWrite(left_bm_acw, LOW);

      digitalWrite(right_bm_cw, LOW);
      digitalWrite(right_bm_acw, LOW);

      analogWrite(left_bm_enable, 0);
      analogWrite(right_bm_enable, 0);
    }
  }
  
}

void move_backward(){
  // rotate acw 180 degrees or cw 180 degrees
  rotate_acw(180);
  move_forward();
}

void move_left(){
  // rotate acw 90 degrees
  if (dist_front_uv() >= 6){
    if (dist_front_uv() <= 9){
      digitalWrite(left_bm_cw, HIGH);
      digitalWrite(left_bm_acw, LOW);
      digitalWrite(right_bm_cw, HIGH);
      digitalWrite(right_bm_acw, LOW);

      analogWrite(left_bm_enable, speed);
      analogWrite(right_bm_enable, speed);
      delay((int)duration/5);

      // now reset everything to normal
      digitalWrite(left_bm_cw, LOW);
      digitalWrite(left_bm_acw, LOW);

      digitalWrite(right_bm_cw, LOW);
      digitalWrite(right_bm_acw, LOW);

      analogWrite(left_bm_enable, 0);
      analogWrite(right_bm_enable, 0);
    } else if (dist_front_uv() <= 12){
      digitalWrite(left_bm_cw, HIGH);
      digitalWrite(left_bm_acw, LOW);
      digitalWrite(right_bm_cw, HIGH);
      digitalWrite(right_bm_acw, LOW);

      analogWrite(left_bm_enable, speed);
      analogWrite(right_bm_enable, speed);
      delay((int)duration/4);

      // now reset everything to normal
      digitalWrite(left_bm_cw, LOW);
      digitalWrite(left_bm_acw, LOW);

      digitalWrite(right_bm_cw, LOW);
      digitalWrite(right_bm_acw, LOW);

      analogWrite(left_bm_enable, 0);
      analogWrite(right_bm_enable, 0);
    } else if (dist_front_uv() <= 15){
      digitalWrite(left_bm_cw, HIGH);
      digitalWrite(left_bm_acw, LOW);
      digitalWrite(right_bm_cw, HIGH);
      digitalWrite(right_bm_acw, LOW);

      analogWrite(left_bm_enable, speed);
      analogWrite(right_bm_enable, speed);
      delay((int)duration/2.5);

      // now reset everything to normal
      digitalWrite(left_bm_cw, LOW);
      digitalWrite(left_bm_acw, LOW);

      digitalWrite(right_bm_cw, LOW);
      digitalWrite(right_bm_acw, LOW);

      analogWrite(left_bm_enable, 0);
      analogWrite(right_bm_enable, 0);
    } else if (dist_front_uv() <= distance){
      digitalWrite(left_bm_cw, HIGH);
      digitalWrite(left_bm_acw, LOW);
      digitalWrite(right_bm_cw, HIGH);
      digitalWrite(right_bm_acw, LOW);

      analogWrite(left_bm_enable, speed);
      analogWrite(right_bm_enable, speed);
      delay((int)duration/2);

      // now reset everything to normal
      digitalWrite(left_bm_cw, LOW);
      digitalWrite(left_bm_acw, LOW);

      digitalWrite(right_bm_cw, LOW);
      digitalWrite(right_bm_acw, LOW);

      analogWrite(left_bm_enable, 0);
      analogWrite(right_bm_enable, 0);
    } else {
      digitalWrite(left_bm_cw, HIGH);
      digitalWrite(left_bm_acw, LOW);
      digitalWrite(right_bm_cw, HIGH);
      digitalWrite(right_bm_acw, LOW);

      analogWrite(left_bm_enable, speed);
      analogWrite(right_bm_enable, speed);
      delay((int)(duration*1.5));

      // now reset everything to normal
      digitalWrite(left_bm_cw, LOW);
      digitalWrite(left_bm_acw, LOW);

      digitalWrite(right_bm_cw, LOW);
      digitalWrite(right_bm_acw, LOW);

      analogWrite(left_bm_enable, 0);
      analogWrite(right_bm_enable, 0);
    }
  }
  rotate_acw(90);
  move_forward();
}

void move_right(){
  // rotate cw 90 degrees
  if (dist_front_uv() >= 6){
    if (dist_front_uv() <= 9){
      digitalWrite(left_bm_cw, HIGH);
      digitalWrite(left_bm_acw, LOW);
      digitalWrite(right_bm_cw, HIGH);
      digitalWrite(right_bm_acw, LOW);

      analogWrite(left_bm_enable, speed);
      analogWrite(right_bm_enable, speed);
      delay((int)duration/5);

      // now reset everything to normal
      digitalWrite(left_bm_cw, LOW);
      digitalWrite(left_bm_acw, LOW);

      digitalWrite(right_bm_cw, LOW);
      digitalWrite(right_bm_acw, LOW);

      analogWrite(left_bm_enable, 0);
      analogWrite(right_bm_enable, 0);
    } else if (dist_front_uv() <= 12){
      digitalWrite(left_bm_cw, HIGH);
      digitalWrite(left_bm_acw, LOW);
      digitalWrite(right_bm_cw, HIGH);
      digitalWrite(right_bm_acw, LOW);

      analogWrite(left_bm_enable, speed);
      analogWrite(right_bm_enable, speed);
      delay((int)duration/8);

      // now reset everything to normal
      digitalWrite(left_bm_cw, LOW);
      digitalWrite(left_bm_acw, LOW);

      digitalWrite(right_bm_cw, LOW);
      digitalWrite(right_bm_acw, LOW);

      analogWrite(left_bm_enable, 0);
      analogWrite(right_bm_enable, 0);
    } else if (dist_front_uv() <= 15){
      digitalWrite(left_bm_cw, HIGH);
      digitalWrite(left_bm_acw, LOW);
      digitalWrite(right_bm_cw, HIGH);
      digitalWrite(right_bm_acw, LOW);

      analogWrite(left_bm_enable, speed);
      analogWrite(right_bm_enable, speed);
      delay((int)duration/4);

      // now reset everything to normal
      digitalWrite(left_bm_cw, LOW);
      digitalWrite(left_bm_acw, LOW);

      digitalWrite(right_bm_cw, LOW);
      digitalWrite(right_bm_acw, LOW);

      analogWrite(left_bm_enable, 0);
      analogWrite(right_bm_enable, 0);
    } else if (dist_front_uv() <= distance){
      digitalWrite(left_bm_cw, HIGH);
      digitalWrite(left_bm_acw, LOW);
      digitalWrite(right_bm_cw, HIGH);
      digitalWrite(right_bm_acw, LOW);

      analogWrite(left_bm_enable, speed);
      analogWrite(right_bm_enable, speed);
      delay((int)duration/2);

      // now reset everything to normal
      digitalWrite(left_bm_cw, LOW);
      digitalWrite(left_bm_acw, LOW);

      digitalWrite(right_bm_cw, LOW);
      digitalWrite(right_bm_acw, LOW);

      analogWrite(left_bm_enable, 0);
      analogWrite(right_bm_enable, 0);
    } else {
      digitalWrite(left_bm_cw, HIGH);
      digitalWrite(left_bm_acw, LOW);
      digitalWrite(right_bm_cw, HIGH);
      digitalWrite(right_bm_acw, LOW);

      analogWrite(left_bm_enable, speed);
      analogWrite(right_bm_enable, speed);
      delay((int)(duration*1.5));

      // now reset everything to normal
      digitalWrite(left_bm_cw, LOW);
      digitalWrite(left_bm_acw, LOW);

      digitalWrite(right_bm_cw, LOW);
      digitalWrite(right_bm_acw, LOW);

      analogWrite(left_bm_enable, 0);
      analogWrite(right_bm_enable, 0);
    }
  }
  rotate_cw(90);
  move_forward();
}

void decide_move(){
  // decide and make a move
  bool front_uv = check_front_uv();
  bool left_uv = check_left_uv();
  bool right_uv = check_right_uv();

  Serial.print(left_uv);
  Serial.print(front_uv);
  Serial.print(right_uv);
  Serial.print("\n");
  if (dist_left_uv() > 300 && dist_front_uv() > 300 && dist_right_uv() > 300){
    issolved = 1;
    return;
  }

  int old_dist = distance;
  while (left_uv == 0 && front_uv == 0 && right_uv == 0){
    distance++;
    front_uv = check_front_uv();
    left_uv = check_left_uv();
    right_uv = check_right_uv();
    if (distance>300){
      distance = old_dist;
      return;
    }
  }
  distance = old_dist;

  if (left_uv == 0){
    // make a left move
    issolved = 0;
    move_left();
    arr[size] = 1;
  } else if (front_uv == 0){
    // make a front move
    issolved = 0;
    move_forward();
    arr[size] = 0;
  } else if (right_uv == 0){
    // make a right move
    issolved = 0;
    move_right();
    arr[size] = 2;
  } else {
    // make a back move
    issolved = 0;
    move_backward();
    arr[size] = 3;
  }
  size = size + 1;
}


void move_on_path(){
  // this will take the path specified in the array
  for (int i=0; i<size; i++){
    if (arr[0] == 0){
      // make a front move
      move_forward();
    } else if (arr[0] == 1){
      // make a left move
      move_left();
    } else if (arr[0] == 2){
      move_right();
    } else {
      move_backward();
    }
  }
}

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define SIZE 8

struct Vertex {
    struct Vertex* next[4];
    int weight[4];
};

int findDirection(struct Vertex* u, struct Vertex* v) {
    for (int i = 0; i < 4; i++) {
        if (u->next[i] == v) {
            return i;
        }
    }
    return -1;
}

int dijkstra(struct Vertex* graph, int size, int start, int end, int* arr) {
    int dist[size];
    int visited[size];
    int parent[size];

    for (int i = 0; i < size; i++) {
        dist[i] = INT_MAX;
        visited[i] = 0;
        parent[i] = -1;
    }

    dist[start] = 0;

    for (int count = 0; count < size - 1; count++) {
        int min = INT_MAX, min_index;

        for (int v = 0; v < size; v++) {
            if (visited[v] == 0 && dist[v] <= min) {
                min = dist[v], min_index = v;
            }
        }

        int u = min_index;
        visited[u] = 1;

        for (int v = 0; v < size; v++) {
            if (!visited[v] && graph[u].next[v] && dist[u] != INT_MAX && dist[u] + graph[u].weight[findDirection(&graph[u], graph[u].next[v])] < dist[v]) {
                parent[v] = u;
                dist[v] = dist[u] + graph[u].weight[findDirection(&graph[u], graph[u].next[v])];
            }
        }
    }

    int path_index = 0;
    for (int v = end; v != -1; v = parent[v]) {
        arr[path_index++] = findDirection(&graph[parent[v]], &graph[v]);
    }

    return path_index;
}

struct Vertex* makegraph(int n){
    struct Vertex* graph = malloc(n*sizeof(struct Vertex));
    for (int i=0; i<n; i++){
        for(int j=0; j<4; j++){
            graph[i].next[j] = NULL;
            graph[i].weight[j] = 0;
        }
    }
    return graph;
}

void add_edge(struct Vertex* graph, int u, int v, int direction, int weight){
    graph[u].next[direction] = &graph[v];
    graph[u].weight[direction] = weight;
}

void get_path(){
    struct Vertex* graph = makegraph(SIZE);
    // Add edges here...
    add_edge(graph,0,1,0,1);
    add_edge(graph,1,2,0,2);
    add_edge(graph,1,3,2,3);
    add_edge(graph,2,4,2,2);
    add_edge(graph,3,5,1,2);
    add_edge(graph,5,6,2,3);
    add_edge(graph,6,7,2,3);
    int start = 0;
    int end = 7;
    int arr[SIZE];
    int size = dijkstra(graph, SIZE, start, end, arr);
    return 0;
}


void loop(){
  while (!issolved){
    decide_move();
  }
  delay(10000);
  move_on_path();
  delay(10000);
  issolved = 0;
}
